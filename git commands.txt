/** Criando repositorio na linha de comando **/

Inicializando um repositorio na linha de comando
#git init 

Adicionando arquivo.
git add .  / git add *.*  -> adicionando todos os arquivos

Commitando 
#git commit -m "Mensagem"
#git commit -a -m "mensagem"  -a == all
Criando uma branch
#git branch -M main ou outro nome apropriado

Adicionando o repositorio
#git remote add origin <endereço>

Enviar para o repositorio
#git push -u origin main

**Se o repositiorio ja existe

#git remote add origin <endereço>
#git branch -M main
#git push -u origin main

#git remote -v -> ver a origem

#git remove rm origin -> remove a origin 

Status do arquivo
#git Status

**Recebendo as mudanças
#git pull

**Clonando repositorio
git clone


**Remover arquivos
#git rm

#git commit -a -m "mensagem" commit
#git push -> e faz o push

**Historico de mudanças
#git log

**Desfazer alterações
#git checkout <arquivo>

**Ignorar arquivos - Criar arquivo
# .gitignore

**Desfazer todas as alterações
#git reset  --hard origin/origin ->perde tudo referente as alterações realizadas.

**Criando Branchs.**

Ver as branches
#git branch

Criar nova
#git branch <nome>

**Novamente clonar repositorio.
git clone <endereço> .  para clonar no local.

**Criar uma nova branch para poder atuar no projeto.

**Apagar uma branch - Não é comum. É utilizado como historico
#git branch -d <branch> ou --delete

**Mudar de Branch.
#git checkout -b <branch> -> Cria e muda para um branch

**Antes de mudar de branch, commitar os arquivos modificados.

**Para receber as atualizações da master, sempre pir para ela e dar um git pull.

**Unindo branchs - Merge.
#git merge <nome>

**Dica não atualizar a master com o push. 

**Stash
#git stash -- Manda o codigo commitado para a lixeira

**Recuperar o Stash

#git stash list - lista as lixeiras.

#git stash apply <stash> recupera tudo que foi lançado na lixeira.

#git stash show -p <numero_stash> Ver as diferenças dos arquivos.

#git stash drop <numero> drop a stash.

#git stash clear - Limpa todas as stashes.

#git stash delete<stash>

**Criando tags - Criar marcos de desenvolvimentos / Demarca estagios

#git tag -a <nome> -m <mensagem> 

#git tag

**Alterando a tag.

git show <nome_tag>
git checkout <nome_tag>

**Enviar a tag para o repositorio.

#git push origin --tags <todas as tags são enviadas> ou git push origin <tag>

******************************************************************************
Sessão de Compartilhamento e atualização.
V1.1.

**Encontra branchs remotos.

#git fetch -> mapea os branchs. 
#git fetch -a -> Lista todos os branches remotos e fazendo o git branch checkout <branch> pego a branch

**Receber atualizações.
#git pull

**Connhecendo submodulos para colocar 2 ou mais projetos em so repositorio.
#git submodule add <endereco_repo> <nome>

#git submodule

 #git pull

 **Atualizar submodulos.
 #git commit -a -m "Mensagem"
 #git push --recurse-submodules=on-demand

 **Analises e inspeção de codigos.

**Exibir detalhes da branch.
#git show  -Mostra o branch atual.
#git show <tag>

**Verificando as diferenças.

#git diff <arquivo> <arquivo_b>

**Log resumido do projeto
#git shortlog

**Administração do Repositorio. -> 02/06/2023

**Limpando arquivos do Untracked

#git clean -f (force)

**Otimizar arquivo  Garbage collector. Identificar arquivos que não são mais necessarios.
#git gc

**Verificar a integridade de arquivos
#git fsck 

**Comando Reflog. Mapea todos os seus passos no repositorio, até mudança de branch.
#git Reflog

**Realizando backup rapido do repo. Transforma o repo em um arquivo.

#git archive --format zip --output master_files.zip master

#git archive --format zip --output <nome_repo.zip> <nome_branch>

**Melhorando os commits 11/06.

#private branches -> brnaches que não são compartilhadas no repositorio.
#git rebase <branch> <branch> -i 
i de insert
:x! sai e salva.
